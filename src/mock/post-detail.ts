export const postDetail = "<p>Goでスクリプトを書くときに使えそうな処理をまとめておきました。</p><h2 id=\"he1a5b257bc\">実行時の引数を受け取る</h2><p><code>flag.Parse()</code>を使えばよさそう。</p><div data-filename=\"script.go\"><pre><code class=\"language-go\">flag.Parse()\nargs :=  flag.Args()\n\nif len(args) != 2 {\n　　fmt.Println(&quot;Usage: go run script.go &lt;user_id&gt; &lt;file_path&gt;&quot;)\n　　os.Exit(1)\n}\n\nuser_id := args[0]\nfile_path := args[1]</code></pre></div><p>スクリプトファイル起動時に、<code>user_id</code>と<code>file_path</code>を指定する想定です。</p><p>以下のようにして呼び出します。</p><div data-filename=\"terminal\"><pre><code class=\"language-shell\">go run sciprt.go 10 input.json</code></pre></div><h2 id=\"h22ee90e38d\">ファイルを読み込む</h2><p>Jsonファイルやテキストファイルをスクリプトに読み込ませて一気に処理したいみたいなことはよくあります。</p><h3 id=\"h94b7948a37\">Jsonファイル</h3><p>以下のようなJsonファイルがあるとします。</p><div data-filename=\"sample.json\"><pre><code class=\"language-json\">{\n  &quot;id&quot; : 1,\n  &quot;name&quot; : &quot;Tokyo Football Club&quot;,\n  &quot;players&quot; : [\n    {\n      &quot;id&quot; : 1,\n      &quot;name&quot; : &quot;Matsuda&quot;,\n      &quot;age&quot; : &quot;30&quot;\n    },\n    {\n      &quot;id&quot; : 2,\n      &quot;name&quot; : &quot;Tanaka&quot;,\n      &quot;age&quot; : &quot;24&quot;\n    }\n  ]\n}</code></pre></div><p>このJsonファイルを読み込んでGoの構造体にはめ込みます。これでスクリプトのなかで気軽に使えるようになりますね。</p><div data-filename=\"script.go\"><pre><code class=\"language-go\">type Team struct {\n\tId      int     `json:&quot;id&quot;`\n\tName    string  `json:&quot;name&quot;`\n\tPlayers Player  `json:&quot;players&quot;`\n}\n\ntype Player struct {\n\tId   int    `json:&quot;id&quot;`\n\tName string `json:&quot;name&quot;`\n\tAge  int    `json:&quot;age&quot;`\n}\n\nfunc main() {\n\tjsonFile, err := os.Open(&quot;sample.json&quot;)\n\tif err != nil {\n\t\tfmt.Println(&quot;Cannot open sample.json.&quot;, err)\n\t\treturn\n\t}\n\tdefer jsonFile.Close()\n\n\tdecoder := json.NewDecoder(jsonFile)\n\tfor {\n\t\tvar team Team\n\t\terr := decoder.Decode(&amp;team)\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Println(&quot;Cannot read json data.&quot;, err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(team)\n\t}\n}</code></pre></div><p>多分これでいけます。</p><h3 id=\"h19b52d8c22\">テキストファイル</h3><p>以下のように、<code>id</code>の一覧が改行で保存されているテキストファイルがあるとします。</p><div data-filename=\"sample.txt\"><pre><code>1012312\n1239049\n3412418\n1234892\n9812334\n8237492\n5238970</code></pre></div><p>これを1行ずつ読み込んで処理していきます。</p><p></p><div data-filename=\"script.go\"><pre><code class=\"language-go\">func main() {\n\tfp, err := os.Open(&quot;sample.txt&quot;)\n\n\tif err != nil {\n\t\tfmt.Println(&quot;File not found&quot;)\n\t\tos.Exit(1)\n\t}\n\n\tdefer fp.Close()\n\n\tscanner := bufio.NewScanner(fp)\n\n\tfor scanner.Scan() {\n                // 1行ずつ読み込む\n\t\tline := scanner.Text()\n\t\tfmt.println(line)\n\t}\n}sssssss</code></pre></div><h2 id=\"he937669e58\">スクリプトの中からシェルのコマンドを実行する</h2><p>スクリプトの中から、普段ターミナルで実行しているようなコマンドを実行したい場合の実装です。この例では、<code>mysql</code>コマンドをスクリプトの中から実行しています。</p><div data-filename=\"script.go\"><pre><code class=\"language-go\">func execute_sql(query string) {\n\tsql := fmt.Sprintf(&quot;mysql -u %s -p&apos;%s&apos; -P %s -h %s %s -e %s&quot;, DB_USER, DB_PASSWORD, DB_PORT, DB_HOST, DB_SCHEMA, query)\n\n\tcmd := exec.Command(&quot;bash&quot;, &quot;-c&quot;, sql)\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tos.Exit(1)\n\t}\n}</code></pre></div><ul><li><code>exec.Command</code>で実行するコマンドを指定</li><li><code>os.Stdout</code>と<code>os.Stderr</code>をそれぞれ<code>cmd.Stdout</code>と<code>cmd.Stderr</code>に指定することで、<code>cmd</code>実行後の出力をosの出力(<code>go run script.go</code>を実行しているターミナルのことかな？)にも反映</li><li><code>cmd.Run</code>で実行</li></ul><p>こんな感じの流れだと思います。</p>";